Test Registers
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00),

My first programm PIL !!! ;-)	Запись в регистры: b0000_rDrS (rD - пегистр приемник, rS - пегистр источник)  (rD _R1(01) <- rS _R0(00)) b0000_0100 hex0
//______________________________________
b0000_0100 h00_04 : MOV R1,R0 (R0 -> R1)
b0000_1000 h00_08 : MOV R2,R0 (R0 -> R2)
b0000_1100 h00_0C : MOV R3,R0 (R0 -> R3)
b0000_0000 h00_00 : MOV R0,R0 (R0 -> R0)
Test with POF : PC 00 to 0F. Source of all step is R0 (FA).
.INIT_00(256'h00_0C_08_04_00_0C_08_04_00_0C_08_04_00_0C_08_04_00_0C_08_04_00_0C_08_04_00_0C_08_04_00_0C_08_04),		



Запись констант в регистры: b0100_rDxx (_Byte from Memory, h4_rDxx) hF9_40 MOV R0,F9 (F9 -> R0) b1111_1001 0100_0000.
1) Byte from memory. 2) Command.
//______________________________________________
b1111_1001 0100_0000 hF9_40 : MOV R0,F9 (F9 -> R0)
b1111_1010 0100_0100 hFA_44 : MOV R1,FA (FA -> R1)
b1111_1011 0100_1000 hFB_48 : MOV R2,FB (FB -> R2)
b1111_1100 0100_1100 hFC_4С : MOV R3,FC (FD -> R3)
Test with POF : PC 00 to 0F.
.INIT_00(256'hFC_4C_FB_48_FA_44_F9_40_FC_4C_FB_48_FA_44_F9_40_FC_4C_FB_48_FA_44_F9_40_FC_4C_FB_48_FA_44_F9_40), // Проскок на один такт ???
.INIT_00(256'hF9_40_FA_44_FB_48_FC_4C_F9_40_FA_44_FB_48_FC_4C_F9_40_FA_44_FB_48_FC_4C_F9_40_FA_44_FB_48_FC_4C), // Проскок на один такт ???
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_FC_4C_FB_48_FA_44_F9_40), // Нормально.



Сложение двух чисел в регистрах: b0010_XXYY h02_rAdd_X_rAdd_Y X = X+Y 
//_____________________________________
b0000_0100 h04 : MOV R1,R0 (R0 -> R1)
b0000_1110 h0E : MOV R3,R2 (R2 -> R3)
b0010_0111 h27 : ADD R1,R3 (R1 = R1 + R3)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_27_0E_04),



Сложение двух чисел в регистрах с записью из памяти в регистры: b0010_XXYY h2_rAdd_X_rAdd_Y X = X+Y 
//_____________________________________
b0000_0011 0100_0100 h03_44 : MOV R1,03 (03 -> R1)
b0000_0111 0100_1000 h07_48 : MOV R2,07 (07 -> R2)
b0010_0110 h26 : ADD R1,R2 (R1 = R1 + R2)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_26_07_48_03_44),	



Вычетание двух чисел в регистрах: b0110_XXYY h6_rSub_X_rSub_Y X = X-Y 
//_____________________________________
b0000_0100 h04 : MOV R1,R0 (R0 -> R1)
b0000_1110 h0E : MOV R3,R2 (R2 -> R3)
b0110_0111 h67 : SUB R1,R3 (R1 = R1 - R3)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_67_0E_04),



Вычетание двух чисел в регистрах с записью из памяти в регистры: b0110_XXYY h6_rSub_X_rSub_Y X = X-Y 
//________________________________________________
b0000_1000 0100_0100 h08_44 : MOV R1,08 (08 -> R1)
b0000_0011 0100_1000 h03_48 : MOV R2,03 (03 -> R2)
b0110_0110 h67 : SUB R1,R3 (R1 = R1 - R0)
b0000_0001 h01 : MOV R0,R1 (R1 -> R3) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_66_03_48_08_44),



Произведение двух чисел в регистрах с записью из памяти в регистры: b1000_XXYY h8_rMul_X_rMul_Y X = X*Y 
//________________________________________________
b0000_1000 0100_0100 h08_44 : MOV R1,08 (08 -> R1)
b0000_0011 0100_1000 h03_48 : MOV R2,03 (03 -> R2)
b1000_0110 h86 MUL R1,R2 (R1 = R1 * R2)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_86_03_48_08_44),	



Деление двух чисел в регистрах с записью из памяти в регистры: b1010_XXYY hA_rDev_X_rDev_Y X = X/Y 
//________________________________________________
b0000_1000 0100_0100 h08_44 : MOV R1,08 (08 -> R1)
b0000_0100 0100_1000 h04_48 : MOV R2,04 (04 -> R2)
b1010_0110 hA6 DEV R1,R2 (R1 = R1 / R2)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_A6_04_48_08_44),	



Деление двух чисел по модулю в регистрах с записью из памяти в регистры: b1100_XXYY hС_rMod_X_rMod_Y X = X%Y 
//________________________________________________
b0000_0111 0100_0100 h07_44 : MOV R1,07 (07 -> R1)
b0000_0010 0100_1000 h02_48 : MOV R2,02 (02 -> R2)
b1100_0110 hC6 MOD R1,R2 (R1 = R1 % R2)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_C6_02_48_07_44),



XOR двух регистров с записью из памяти в регистры: b1110_XXYY hE_rXOR_X_rXOR_Y X = X^Y 
//________________________________________________
b0000_0011 0100_0100 h03_44 : MOV R1,02 (03 -> R1)
b0000_0010 0100_1000 h02_48 : MOV R2,03 (02 -> R2)
b1110_0110 hE6 XOR R1,R2 (R1 = R1^R2)
b0000_0001 h01 : MOV R0,R1 (R1 -> R0) Запись в аккумулятор. (R0)
Test with POF : PC 00 to 0F.
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_E6_02_48_03_44),	



Команда JMP. b0100_0010 (ADDRR to JMP, h42 (Jmp)) 
//________________________________________________
b0000_0011 b0100_0010 h42_03 JMP 03
b0000_0101 b0100_0010 h42_05 JMP 05
b0000_1111 b0100_0010 h42_0F JMP 0F
b0000_0000 b0100_0010 h42_00 JMP 00

// b0000_0011 b0100_0100 h42_03 JMP 03 JMP Command.

Сonditional jumZ 0001_xxxx ADDRR JMPZ. 08

// 00,01,02,03,0B,0C,0D,0E,03,04,05,06,07,00 и по кругу!
// .INIT_00(256'h00_0F_0B_04_00_0F_0B_04_00_0F_0B_04_00_0F_0B_04_00_0F_0B_04_00_0F_0B_04_00_0F_0B_04_00_0F_0B_04),
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_03_42_00_00_00_00_00_00_42_00_00_0B_42_00_00),
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_03_42_00_00_00_00_00_00_0A_42_04_04_40_00_00),
//																						E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
//.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_03_42_00_00_00_00_00_00_0A_42_04_04_40_00_00),
//.INIT_00(256'h0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_0D_26_07_48_03_44),

//						  	       F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0		
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_05_42_00_00_00_00_00_00_42_00_00_00_0C_42_00),

Вышли за 0F
//						  	       F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_05_42_00_00_00_00_00_28_42_00_00_00_0C_42_00),
.INIT_01(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_51_42_00_00_00_00_00_00_00_00_00),
.INIT_02(256'h00_00_00_00_00_00_00_00_00_00_00_00_67_42_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00),
.INIT_03(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_42_00_00_00_00_00_00_00_00),


Система команд.
MOV RD,RS

ADD R1,R2
MUL R1,R2
SUB R1,R2
DIV R1,R2
MOD R1,R2
XOR R1,R2

MEM RВ #MEM.
JMP ADR.
JZ ADR in processing.

1010 A
1011 B

b0110_1011 h6B : SUB R2,R3 (R2 = R2 - R3)
b0000_0011 0100_1000 h03_48
b0000_0011 0100_1100 h03_4C

//						  	       F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_05_42_00_00_00_00_00_28_42_00_00_00_0C_42_00),
.INIT_01(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_51_42_00_00_00_00_00_00_00_00_00),
.INIT_02(256'h00_00_00_00_00_00_00_00_00_00_00_00_67_42_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00),
.INIT_03(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_42_00_00_00_00_00_00_00_00),

//						  	       F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_02_42_00_00_00_00_00_00_00_00_0C_10_6B_00_00),
.INIT_01(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_51_42_00_00_00_00_00_00_00_00_00),
.INIT_02(256'h00_00_00_00_00_00_00_00_00_00_00_00_67_42_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00),
.INIT_03(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_42_00_00_00_00_00_00_00_00),








































Assembler PIL code.
01 MOV R2,03
02 MOV R3,03
03 SUB R2,R3
04 JNZ 0C	// Go to addrr 0C if SUB operation is zero!
05 
06
.
.
0C MOV R2,03
0D ADD R1,R2	// Write something on display.
0E JMP 03	// Go to SUB operator.

// HEX code.
//						     12	11 10  F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
.INIT_00(256'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_04_42_00_26_03_48_00_00_00_00_00_0C_50_6B_03_4C_03_48),










